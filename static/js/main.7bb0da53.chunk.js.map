{"version":3,"sources":["logo.svg","components/video_list_item.jsx","components/video_list.jsx","components/search_bar.jsx","components/video_detail.jsx","Page.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","video","onVideoSelect","imageURL","snippet","thumbnails","default","url","onClick","className","alt","src","title","props","videos","map","key","etag","state","term","dfltVl","this","setState","onSearchTermChange","value","onChange","e","onInputChange","target","Comp","videoId","id","description","selectedVideo","videoSearch","YTSearch","_","debounce","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uIAAAA,EAAOC,QAAU,IAA0B,kC,kLCE5B,cAGR,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,cAEMC,EAAWF,EAAMG,QAAQC,WAAWC,QAAQC,IAClD,OACE,wBAAIC,QAAS,kBAAMN,EAAcD,IAAQQ,UAAU,mBAChD,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,cACb,yBAAKC,IAAI,GAAGD,UAAU,eAAeE,IAAKR,KAE5C,yBAAKM,UAAU,cACb,yBAAKA,UAAU,iBACZR,EAAMG,QAAQQ,WCZb,WAAAC,GAAK,OAChB,wBAAIJ,UAAU,uBACVI,EAAMC,OAAOC,KAAI,SAAAd,GAAK,OAAI,kBAAC,EAAD,CACxBC,cAAeW,EAAMX,cACrBc,IAAKf,EAAMgB,KACXhB,MAAOA,S,oDCLf,WAAYY,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACXC,KAAMN,EAAMO,QAHG,E,0DAOLD,GACZE,KAAKC,SAAS,CACZH,SAEFE,KAAKR,MAAMU,mBAAmBJ,K,+BAGtB,IAAD,OACP,OAAQ,yBAAKV,UAAU,cACf,2BACEe,MAAOH,KAAKH,MAAMC,KAClBM,SAAU,SAAAC,GAAC,OAAI,EAAKC,cAAcD,EAAEE,OAAOJ,e,GAnB5BK,aCAd,cAER,IADL5B,EACI,EADJA,MAEA,IAAKA,EAAO,OAAO,2CADf,IAGF6B,EACE7B,EAAM8B,GADRD,QAEIvB,EAAG,wCAAoCuB,GAE7C,OACE,yBAAKrB,UAAU,yBACb,yBAAKA,UAAU,2CACb,4BAAQE,IAAKJ,EAAKE,UAAU,2BAE9B,yBAAKA,UAAU,WACb,6BAAMR,EAAMG,QAAQQ,OACpB,6BAAMX,EAAMG,QAAQ4B,gB,oDCN1B,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IACDK,MAAQ,CACXJ,OAAQ,GACRmB,cAAe,KACfd,KAAM,UAGR,EAAKe,YAAY,EAAKhB,MAAMC,MARX,E,wDAUPA,GAAO,IAAD,OAChBgB,IAAS,CACLnB,IAhBQ,0CAiBRG,SAEF,SAAAL,GAAM,OAAI,EAAKQ,SAAS,CACtBR,SACAmB,cAAenB,EAAO,U,+BAGlB,IAAD,OACDoB,EAAcE,IAAEC,UAAS,SAAAlB,GAAI,OAAI,EAAKe,YAAYf,KAAO,KAC/D,OAAQ,6BACN,kBAAC,EAAD,CAAWI,mBAAoBW,EAAad,OAAQC,KAAKH,MAAMC,OAC/D,yBAAKV,UAAU,OACf,kBAAC,EAAD,CAAaR,MAAOoB,KAAKH,MAAMe,gBAC/B,kBAAC,EAAD,CACEnB,OAAQO,KAAKH,MAAMJ,OACnBZ,cAAe,SAAA+B,GAAa,OAAI,EAAKX,SAAS,CAAEW,2B,GA7B3BJ,aCHdS,MAJf,WACE,OAAO,kBAAC,EAAD,OCOWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.7bb0da53.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\nexport default ({\r\n  video,\r\n  onVideoSelect\r\n}) => {\r\n  const imageURL = video.snippet.thumbnails.default.url;\r\n  return (\r\n    <li onClick={() => onVideoSelect(video)} className=\"list-group-item\">\r\n       <div className=\"video_list media\">\r\n         <div className=\"media-left\">\r\n           <img alt=\"\" className=\"media-object\" src={imageURL} />\r\n         </div>\r\n         <div className=\"media-body\">\r\n           <div className=\"media-heading\">\r\n             {video.snippet.title}\r\n           </div>\r\n         </div>\r\n       </div>\r\n     </li>\r\n  );\r\n};\r\n","import React from 'react';\r\nimport VideoListItem from './video_list_item';\r\n\r\nexport default props => (\r\n    <ul className=\"col-md-4 list-group\">\r\n      { props.videos.map(video => <VideoListItem\r\n          onVideoSelect={props.onVideoSelect}\r\n          key={video.etag}\r\n          video={video} />)}\r\n    </ul>\r\n\r\n);\r\n","import React, { Component as Comp } from 'react';\r\n\r\nexport default class extends Comp {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      term: props.dfltVl\r\n    };\r\n  }\r\n\r\n  onInputChange(term) {\r\n    this.setState({\r\n      term\r\n    });\r\n    this.props.onSearchTermChange(term);\r\n  }\r\n\r\n  render() {\r\n    return (<div className=\"search-bar\">\r\n            <input\r\n              value={this.state.term}\r\n              onChange={e => this.onInputChange(e.target.value)}\r\n            />\r\n           </div>);\r\n  }\r\n}\r\n","import React from 'react';\r\n\r\nexport default ({\r\n  video\r\n}) => {\r\n  if (!video) return <div>Loading...</div>;\r\n  const {\r\n    videoId\r\n  } = video.id;\r\n  const url = `https://www.youtube.com/embed/${videoId}`;\r\n\r\n  return (\r\n    <div className=\"video-detail col-md-8\">\r\n      <div className=\"embed-responsive embed-responsive-16by9\">\r\n        <iframe src={url} className=\"embed-responsive-item\" />\r\n      </div>\r\n      <div className=\"details\">\r\n        <div>{video.snippet.title}</div>\r\n        <div>{video.snippet.description}</div>\r\n      </div>\r\n     </div>\r\n  );\r\n};\r\n","import React, { Component as Comp } from 'react';\r\n\r\nimport YTSearch from 'youtube-api-search';\r\nimport _ from 'lodash';\r\nimport VideoList from './components/video_list';\r\nimport SearchBar from './components/search_bar';\r\nimport VideoDetail from './components/video_detail';\r\n\r\nconst API_KEY = 'AIzaSyDftyIlrXCFKIeRt4OkNu6t-_RIZ7O0LE8';\r\n\r\n\r\nexport default class extends Comp {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      videos: [],\r\n      selectedVideo: null,\r\n      term: 'Router'\r\n    };\r\n\r\n    this.videoSearch(this.state.term);\r\n  }\r\n  videoSearch(term) {\r\n    YTSearch({\r\n        key: API_KEY,\r\n        term\r\n      },\r\n      videos => this.setState({\r\n        videos,\r\n        selectedVideo: videos[0]\r\n      }));\r\n}\r\n  render() {\r\n    const videoSearch = _.debounce(term => this.videoSearch(term), 300);\r\n    return (<div>\r\n      <SearchBar onSearchTermChange={videoSearch} dfltVl={this.state.term} />\r\n      <div className=\"row\">\r\n      <VideoDetail video={this.state.selectedVideo} />\r\n      <VideoList\r\n        videos={this.state.videos}\r\n        onVideoSelect={selectedVideo => this.setState({ selectedVideo })}\r\n      />\r\n      </div>\r\n\r\n    </div>);\r\n  }\r\n}\r\n","import React from 'react'\nimport logo from './logo.svg'\nimport './App.css'\nimport Page from './Page'\nfunction App() {\n  return <Page />\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}